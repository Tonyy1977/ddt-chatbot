"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/tidycal/suggest";
exports.ids = ["pages/api/tidycal/suggest"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftidycal%2Fsuggest&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ctidycal%5Csuggest.js&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftidycal%2Fsuggest&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ctidycal%5Csuggest.js&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_tidycal_suggest_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pages\\api\\tidycal\\suggest.js */ \"(api-node)/./pages/api/tidycal/suggest.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_tidycal_suggest_js__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_tidycal_suggest_js__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/tidycal/suggest\",\n        pathname: \"/api/tidycal/suggest\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_tidycal_suggest_js__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/tidycal/suggest\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/tidycal/suggest\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftidycal%2Fsuggest&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ctidycal%5Csuggest.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/tidycal/suggest.js":
/*!**************************************!*\
  !*** ./pages/api/tidycal/suggest.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n// api/tidycal.js — Vercel serverless version of TidyCal scheduling logic\nconst SLOT_RULES = {\n    types: {\n        tour: {\n            stepMins: 15,\n            url: \"https://tidycal.com/ddtenterpriseusa/15-minute-meeting\"\n        },\n        meeting: {\n            stepMins: 30,\n            url: \"https://tidycal.com/ddtenterpriseusa/30-minute-meeting\"\n        }\n    },\n    workingWindows: {\n        3: [\n            {\n                start: {\n                    h: 17,\n                    m: 0\n                },\n                end: {\n                    h: 20,\n                    m: 0\n                }\n            }\n        ],\n        6: [\n            {\n                start: {\n                    h: 11,\n                    m: 0\n                },\n                end: {\n                    h: 13,\n                    m: 0\n                }\n            }\n        ],\n        0: [\n            {\n                start: {\n                    h: 14,\n                    m: 0\n                },\n                end: {\n                    h: 16,\n                    m: 0\n                }\n            }\n        ]\n    },\n    bufferMins: 120\n};\nconst POLICY_SUMMARY = \"We currently schedule on Wednesday (5–8pm), Saturday (11am–1pm), and Sunday (2–4pm). \" + \"Tours are 15 minutes; meetings are 30 minutes.\";\n// ---------- helpers ----------\nconst pad2 = (n)=>String(n).padStart(2, \"0\");\nconst ymd = (d)=>`${d.getFullYear()}-${pad2(d.getMonth() + 1)}-${pad2(d.getDate())}`;\nconst isSameDay = (a, b)=>a.toDateString() === b.toDateString();\nconst addMinutes = (d, mins)=>new Date(d.getTime() + mins * 60000);\nconst addDays = (d, days)=>{\n    const x = new Date(d);\n    x.setDate(x.getDate() + days);\n    return x;\n};\nconst overlaps = (aStart, aEnd, bStart, bEnd)=>aStart < bEnd && aEnd > bStart;\nfunction parseYMD(dateStr) {\n    const [yy, mm, dd] = (dateStr || \"\").split(\"-\").map(Number);\n    const d = new Date();\n    if (!yy || !mm || !dd) {\n        d.setHours(0, 0, 0, 0);\n        return d;\n    }\n    d.setFullYear(yy, mm - 1, dd);\n    d.setHours(0, 0, 0, 0);\n    return d;\n}\nfunction setHhMm(base, hh, mm) {\n    const d = new Date(base);\n    d.setHours(hh, mm, 0, 0);\n    return d;\n}\nfunction alignToGrid(d, stepMins) {\n    const minutes = d.getMinutes();\n    const over = minutes % stepMins;\n    if (over === 0) return d;\n    return addMinutes(d, stepMins - over);\n}\nfunction formatHuman(d) {\n    return d.toLocaleString(\"en-US\", {\n        weekday: \"short\",\n        month: \"short\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"2-digit\"\n    });\n}\nfunction windowsForDate(dateObj) {\n    return SLOT_RULES.workingWindows[dateObj.getDay()] || [];\n}\nfunction noon(dateObj) {\n    return setHhMm(dateObj, 12, 0);\n}\nasync function getAllBookingsJSON() {\n    const apiKey = process.env.TIDYCAL_API_KEY;\n    const resp = await fetch(\"https://tidycal.com/api/bookings\", {\n        headers: {\n            Authorization: `Bearer ${apiKey}`\n        }\n    });\n    const data = await resp.json();\n    return data?.data || [];\n}\nfunction buildCandidateWindows(dateObj, typeKey, preference) {\n    const all = windowsForDate(dateObj);\n    const stepMins = SLOT_RULES.types[typeKey].stepMins;\n    if (!all.length) return [];\n    const cand = [];\n    for (const w of all){\n        const ws = setHhMm(dateObj, w.start.h, w.start.m);\n        const we = setHhMm(dateObj, w.end.h, w.end.m);\n        const latestStart = addMinutes(we, -stepMins);\n        if (latestStart < ws) continue;\n        const n = noon(dateObj);\n        let start = ws, endStart = latestStart;\n        if (preference === \"morning\") {\n            endStart = addMinutes(n, -stepMins);\n            if (endStart < ws) continue;\n        } else if (preference === \"afternoon\") {\n            if (latestStart < n) continue;\n            start = n > ws ? n : ws;\n        }\n        cand.push({\n            start,\n            endStart,\n            stepMins\n        });\n    }\n    return cand;\n}\nfunction findSlotsForDay({ dateObj, typeKey, preference, bookings, afterISO, count = 1, strategy = \"first\" }) {\n    const windows = buildCandidateWindows(dateObj, typeKey, preference);\n    if (!windows.length) return {\n        slots: [],\n        hadWindows: false\n    };\n    const now = new Date();\n    const isToday = isSameDay(now, dateObj);\n    const candidates = [];\n    for (const w of windows){\n        let minStart = new Date(w.start);\n        if (afterISO) {\n            let after = /^\\d{1,2}:\\d{2}$/.test(afterISO) ? setHhMm(dateObj, ...afterISO.split(\":\").map(Number)) : new Date(afterISO);\n            if (isSameDay(after, dateObj) && after > minStart) minStart = after;\n        }\n        if (isToday) {\n            const cutoff = alignToGrid(addMinutes(now, SLOT_RULES.bufferMins), w.stepMins);\n            if (cutoff > minStart) minStart = cutoff;\n        }\n        minStart = alignToGrid(minStart, w.stepMins);\n        for(let cur = new Date(minStart); cur <= w.endStart; cur = addMinutes(cur, w.stepMins)){\n            const end = addMinutes(cur, w.stepMins);\n            const bad = bookings.some((b)=>{\n                const bs = new Date(b.starts_at), be = new Date(b.ends_at);\n                return overlaps(cur, end, bs, be);\n            });\n            if (!bad) candidates.push({\n                start: new Date(cur),\n                end\n            });\n        }\n    }\n    if (!candidates.length) return {\n        slots: [],\n        hadWindows: true\n    };\n    let ordered = candidates.slice().sort((a, b)=>a.start - b.start);\n    if (strategy === \"last\") ordered = ordered.slice(-count);\n    else ordered = ordered.slice(0, count);\n    return {\n        slots: ordered.map(({ start, end })=>({\n                start: start.toISOString(),\n                end: end.toISOString(),\n                human: formatHuman(start)\n            })),\n        hadWindows: true\n    };\n}\nfunction findNextAvailableForward({ startDateObj, typeKey, preference, bookings, afterISO, count = 3 }) {\n    for(let i = 0; i < 60; i++){\n        const dateObj = addDays(startDateObj, i);\n        const res = findSlotsForDay({\n            dateObj,\n            typeKey,\n            preference,\n            bookings,\n            afterISO,\n            count\n        });\n        if (res.slots.length) {\n            return {\n                dateYMD: ymd(dateObj),\n                options: res.slots\n            };\n        }\n    }\n    return null;\n}\nasync function handler(req, res) {\n    if (req.method !== \"GET\") return res.status(405).json({\n        error: \"Method not allowed\"\n    });\n    try {\n        const apiKey = process.env.TIDYCAL_API_KEY;\n        if (!apiKey) return res.status(500).json({\n            error: \"Missing TidyCal API key\"\n        });\n        const type = String(req.query.type || \"meeting\").toLowerCase();\n        const preference = String(req.query.preference || \"\").toLowerCase();\n        const dateStr = String(req.query.date || ymd(new Date()));\n        const afterISO = req.query.after ? String(req.query.after) : \"\";\n        const count = Math.max(1, Math.min(5, Number(req.query.count) || 1));\n        const strategy = String(req.query.strategy || \"first\").toLowerCase();\n        if (!SLOT_RULES.types[type]) {\n            return res.status(400).json({\n                error: \"Invalid booking type\"\n            });\n        }\n        const dateObj = parseYMD(dateStr);\n        const bookings = await getAllBookingsJSON();\n        const windows = windowsForDate(dateObj);\n        if (!windows.length) {\n            const next = findNextAvailableForward({\n                startDateObj: addDays(dateObj, 1),\n                typeKey: type,\n                preference,\n                bookings,\n                afterISO\n            });\n            return res.status(403).json({\n                error: \"Closed day\",\n                closedDay: true,\n                policy: POLICY_SUMMARY,\n                type,\n                preference,\n                dateYMD: ymd(dateObj),\n                bookingUrl: SLOT_RULES.types[type].url,\n                nextAvailable: next\n            });\n        }\n        const { slots, hadWindows } = findSlotsForDay({\n            dateObj,\n            typeKey: type,\n            preference,\n            bookings,\n            afterISO,\n            count,\n            strategy\n        });\n        if (!slots.length) {\n            const next = findNextAvailableForward({\n                startDateObj: addDays(dateObj, 1),\n                typeKey: type,\n                preference,\n                bookings,\n                afterISO\n            });\n            return res.status(404).json({\n                error: hadWindows ? \"Fully booked\" : \"Closed day\",\n                fullyBooked: hadWindows,\n                closedDay: !hadWindows,\n                policy: POLICY_SUMMARY,\n                type,\n                preference,\n                dateYMD: ymd(dateObj),\n                bookingUrl: SLOT_RULES.types[type].url,\n                nextAvailable: next\n            });\n        }\n        const primary = slots[0];\n        return res.status(200).json({\n            type,\n            preference,\n            dateYMD: ymd(dateObj),\n            bookingUrl: SLOT_RULES.types[type].url,\n            options: slots,\n            start: primary.start,\n            end: primary.end,\n            human: primary.human,\n            policy: POLICY_SUMMARY\n        });\n    } catch (err) {\n        console.error(\"❌ /api/tidycal error:\", err);\n        return res.status(500).json({\n            error: \"Failed to suggest a time\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/tidycal/suggest.js\n");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftidycal%2Fsuggest&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ctidycal%5Csuggest.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();